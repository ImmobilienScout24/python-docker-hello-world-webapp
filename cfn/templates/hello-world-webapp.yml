AWSTemplateFormatVersion: '2010-09-09'
Description: hello-world-webapp
Parameters:
  dockerImageVersion:
    Description: Docker image version
    Type: String
    Default: 381
  sshKeyName:
    Description: SSH key name to access EC2 instances
    Type: String
  subnetIds:
    ConstraintDescription: comma separated list of subnet-ids, defaults for Ireland
    Default: subnet-4324981a, subnet-96ff8df3, subnet-a471ebd3
    Description: Subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
  vpcId:
    ConstraintDescription: must begin with vpc- and can contain only alphanumeric
      characters. defaults for Ireland
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
Resources:
  EcsService:
    DesiredCount: 1
  DnsRecord:
    Properties:
      Comment: Static URL for stack
      HostedZoneName: val.immobilienscout24.de.
      Name:
        '|Join|.':
          - Ref: AWS::StackName
          - 'val.immobilienscout24.de.'
      ResourceRecords:
        - '|GetAtt|elb|DNSName'
      TTL: '900'
      Type: CNAME
    Type: AWS::Route53::RecordSet
  ElbHealthyInstances:
    Properties:
      AlarmActions:
        - Ref: notificationTopicArn
      AlarmDescription: There should be one healthy instance
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: LoadBalancerName
          Value: '|Ref|elb'
      EvaluationPeriods: '2'
      MetricName: HealthyHostCount
      Namespace: AWS/ELB
      Period: '60'
      Statistic: Average
      Threshold: '1'
    Type: AWS::CloudWatch::Alarm
  WebAsg:
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: AWS::Region
      Cooldown: '10'
      HealthCheckGracePeriod: '600'
      HealthCheckType: ELB
      LaunchConfigurationName:
        Ref: WebLc
      LoadBalancerNames:
      - Ref: elb
      MaxSize: '10'
      MinSize: '2'
      DesiredCapacity: '2'
      Tags:
      - Key: dockerImageVersion
        PropagateAtLaunch: true
        Value:
          Ref: dockerImageVersion
      TerminationPolicies:
      - OldestLaunchConfiguration
      VPCZoneIdentifier:
        Ref: subnetIds
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '2'
        PauseTime: PT15M
        WaitOnResourceSignals: true
  elb:
    Properties:
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: false
        S3BucketName:
          Ref: s3LogBucket
        S3BucketPrefix: elb
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '10'
        Interval: '10'
        Target: HTTP:8080/status
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '8080'
        InstanceProtocol: HTTP
        LoadBalancerPort: '443'
        Protocol: HTTPS
        SSLCertificateId: arn:aws:iam::744969810879:server-certificate/val-immobilienscout24-de
      SecurityGroups:
      - Ref: elbsg
      Subnets:
        Ref: subnetIds
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  elbsg:
    Properties:
      GroupDescription: ELB
      VpcId:
        Ref: vpcId
    Type: AWS::EC2::SecurityGroup
  elbsgEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: sg
      FromPort: '8080'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '8080'
    Type: AWS::EC2::SecurityGroupEgress
  elbsgIngressFromEverywhere:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '80'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '80'
    Type: AWS::EC2::SecurityGroupIngress
  elbsgIngressSslFromEverywhere:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '443'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '443'
    Type: AWS::EC2::SecurityGroupIngress
  iamInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: iamRole
    Type: AWS::IAM::InstanceProfile
  iamRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:Describe*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - '|Join|:':
                - 'arn:aws:logs'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'log-group'
                - Ref: syslog
                - '*'
            - '|Join|:':
                - 'arn:aws:logs'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'log-group'
                - Ref: applicationLog
                - '*'
          Version: '2012-10-17'
        PolicyName: awslogs
      - PolicyDocument:
          Statement:
          - Action: elasticloadbalancing:DescribeInstanceHealth
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: allow-elb-healthcheck
      - PolicyDocument:
          Statement:
          - Action: dynamodb:*
            Effect: Allow
            Resource:
              '|Join|':
                - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':table/'
                - Ref: AWS::StackName
                - '_*'
          - Action: dynamodb:ListTables
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: allow-dynamodb
      - PolicyDocument:
          Statement:
          - Action: sqs:*
            Effect: Allow
            Resource:
            - '|GetAtt|exposeQueue|Arn'
            - '|GetAtt|monthlyCommercialRealtorQueue|Arn'
            - '|GetAtt|realtorQueue|Arn'
            - '|GetAtt|allExposesQueue|Arn'
            - '|GetAtt|schedulingQueue|Arn'
            - '|GetAtt|jobQueue|Arn'
          Version: '2012-10-17'
        PolicyName: allow-access-queues
      - PolicyDocument:
          Statement:
          - Action: cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: allow-putMetric
      - PolicyDocument:
          Statement:
          - Action: kms:Decrypt*
            Effect: Allow
            Resource:
              '|Join|':
                - 'arn:aws:kms:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':key/'
                - Ref: performanceMasterKeyID
          Version: '2012-10-17'
        PolicyName: allow-key-usage
    Type: AWS::IAM::Role
  WebLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: "|Ref|iamInstanceProfile"
      ImageId: "|Ref|taupageAmiId"
      InstanceType: "|Ref|ec2TypeWeb"
      KeyName: "|Ref|sshKeyName"
      SecurityGroups:
      - "|Ref|sg"
      "@TaupageUserData@":
        application_id: "|Ref|AWS::StackName"
        application_version: "|Ref|dockerImageVersion"
        source:
          '|Join|':
            - 'valuation-registry.val.immobilienscout24.de/scoutreport/similarity-report-api:'
            - Ref: dockerImageVersion
        health_check_path: "/status"
        health_check_port: 8080
        health_check_timeout_seconds: 900
        mint_bucket: "is24-stups-mint-744969810879-eu-central-1'"
        cloudwatch_logs:
          /var/log/syslog: "|Ref|syslog"
          /var/log/application.log: "|Ref|applicationLog"
        healthcheck:
          type: elb
          loadbalancer_name: "|Ref|elb"
        notify_cfn:
          resource: WebAsg
          stack: "|Ref|AWS::StackName"
        ports:
          8080: 9000
        root: true
        runtime: Docker
        dockercfg:
          'https://valuation-registry.val.immobilienscout24.de':
            auth: "dmFsdWF0aW9uOnl1blVyZ0VubW9sakVia2lldkV5"
            email: "test@example.com"
        environment:
          REST_API_PERFORMANCE_KEY: "|Ref|performanceRestAPIKey"
          REST_API_PERFORMANCE_SECRET: "|Ref|performanceRestAPISecret"
          REST_API_HOST: "|Ref|restApiHost"
          DYNAMO_DB_PREFIX: "|Ref|AWS::StackName"
          MONTHLY_COMMERCIAL_REALTOR_QUEUE_URL: "|Ref|monthlyCommercialRealtorQueue"
          EXPOSE_QUEUE_URL: "|Ref|exposeQueue"
          REALTOR_QUEUE_URL: "|Ref|realtorQueue"
          ALL_EXPOSE_QUEUE_URL: "|Ref|allExposesQueue"
          SCHEDULING_QUEUE_URL: "|Ref|schedulingQueue"
          JOB_QUEUE_URL: "|Ref|jobQueue"
          JOB_RUNNER: "false"
  s3LogBucket:
    Properties:
      AccessControl: LogDeliveryWrite
    Type: AWS::S3::Bucket
  s3LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: s3LogBucket
      PolicyDocument:
        Statement:
          - Action: 's3:PutObject'
            Effect: Allow
            Principal:
              AWS:
              - 156460612806
              - 054676820928
            Resource:
              '|Join|':
                - 'arn:aws:s3:::'
                - Ref: s3LogBucket
                - '/elb/AWSLogs/*'
  sg:
    Properties:
      GroupDescription: stack internal
      VpcId:
        Ref: vpcId
    Type: AWS::EC2::SecurityGroup
  sgIngressFromELB:
    Properties:
      FromPort: '8080'
      GroupId:
        Ref: sg
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: elbsg
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress
Outputs:
  S3LogBucket:
    Description: S3 log bucket for this stack
    Value: '|GetAtt|s3LogBucket|WebsiteURL'
  WebsiteURL:
    Description: Service URL
    Value:
      '|Join|':
        - 'http://'
        - '|GetAtt|elb|DNSName'
        - '/'

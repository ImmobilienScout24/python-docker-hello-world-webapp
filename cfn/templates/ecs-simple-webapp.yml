AWSTemplateFormatVersion: '2010-09-09'
Description: ecs simple webapp for logging
Parameters:
  dockerImageVersion:
    Description: Docker image version
    Type: String
    Default: latest
  dockerAppImage:
    Description: Docker application image
    Type: String
  dockerContainerName:
    Description: Name of the application container
    Type: String
  sshKeyName:
    Description: SSH key name to access EC2 instances
    Type: String
  dnsDomain:
    Description: DNS Domain to use for the service
    Type: String
  subnetIds:
    ConstraintDescription: comma separated list of subnet-ids, defaults for Ireland
    Default: subnet-4324981a, subnet-96ff8df3, subnet-a471ebd3
    Description: Subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
  amiId:
    Description: Id of the base AMI
    Type: AWS::EC2::Image::Id
  vpcId:
    ConstraintDescription: must begin with vpc- and can contain only alphanumeric
      characters. defaults for Ireland
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Instance Type
    Type: String
  LogStreamName:
    Description: Stream name of the Kinesis stream intended to deliver logs to
    Type: String
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  taskdefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: "|ref|dockerContainerName"
          Cpu: "10"
          Essential: "true"
          Image:
            '|Join|:':
              - "|ref|dockerAppImage"
              - "|ref|dockerImageVersion"
          Memory: "300"
          PortMappings:
            - HostPort: 8080
              ContainerPort: 8080
  service:
    Type: "AWS::ECS::Service"
    DependsOn:
      - "ECSServiceRole"
      - "Asg"
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: "1"
      LoadBalancers:
        - ContainerName: "|ref|dockerContainerName"
          ContainerPort: "8080"
          LoadBalancerName:
            Ref: "elb"
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: "taskdefinition"
  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "ecs-service"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "elasticloadbalancing:*"
                Resource: "*"
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: Static URL for stack
      HostedZoneName:
        '|Join|':
          - '|Ref|dnsDomain'
          - '.'
      Name:
        '|Join|.':
          - Ref: AWS::StackName
          - '|Ref|dnsDomain'
      ResourceRecords:
        - '|GetAtt|elb|DNSName'
      TTL: '900'
      Type: CNAME
  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: AWS::Region
      Cooldown: '10'
      HealthCheckGracePeriod: '600'
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      LoadBalancerNames:
      - Ref: elb
      MaxSize: '10'
      MinSize: '2'
      DesiredCapacity: '2'
      TerminationPolicies:
      - OldestLaunchConfiguration
      VPCZoneIdentifier:
        Ref: subnetIds
  elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: false
        S3BucketName:
          Ref: s3LogBucket
        S3BucketPrefix: elb
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '10'
        Interval: '10'
        Target: HTTP:8080/
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '8080'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
      SecurityGroups:
      - Ref: elbsg
      Subnets:
        Ref: subnetIds
  s3LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
  s3LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: s3LogBucket
      PolicyDocument:
        Statement:
          - Action: 's3:PutObject'
            Effect: Allow
            Principal:
              AWS:
              - 156460612806
              - 054676820928
            Resource:
              '|Join|':
                - 'arn:aws:s3:::'
                - Ref: s3LogBucket
                - '/elb/AWSLogs/*'
  elbsg:
    Properties:
      GroupDescription: ELB
      VpcId:
        Ref: vpcId
    Type: AWS::EC2::SecurityGroup
  elbsgEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: sg
      FromPort: '8080'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '8080'
    Type: AWS::EC2::SecurityGroupEgress
  elbsgIngressFromEverywhere:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '80'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '80'
    Type: AWS::EC2::SecurityGroupIngress
  iamInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: iamRole
    Type: AWS::IAM::InstanceProfile
  iamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:Describe*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          Version: '2012-10-17'
        PolicyName: awslogs
      - PolicyDocument:
          Statement:
          - Action: elasticloadbalancing:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: allow-elb-healthcheck
      - PolicyDocument:
          Statement:
          - Action: cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: allow-putMetric
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:CreateCluster
            - ecs:RegisterContainerInstance
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Submit*
            - ecs:Poll
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: esc-service
      - PolicyDocument:
          Statement:
          - Action:
            - kinesis:DescribeStream
            - kinesis:PutRecord
            - kinesis:PutRecords
            - kinesis:GetShardIterator
            - kinesis:GetRecords
            Effect: Allow
            Resource: "*"
          Version: '2012-10-17'
        PolicyName: allow-put-on-kinesis-logstream
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups:
        - "|ref|sg"
      ImageId: "|ref|amiId"
      InstanceType: "|ref|InstanceType"
      IamInstanceProfile: "|ref|iamInstanceProfile"
      KeyName: "|ref|sshKeyName"
      UserData:
        Fn::Base64:
          Fn::Join:
           - ""
           -
             - "#!/bin/bash\n"
             - "echo ECS_CLUSTER="
             - Ref: "ECSCluster"
             - " >> /etc/ecs/ecs.config\n"
             - "echo "
             - Ref: "LogStreamName"
             - " > /etc/default/log-stream-name"
  sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: stack internal
      VpcId:
        Ref: vpcId
  sgIngressFromELB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: '8080'
      GroupId:
        Ref: sg
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: elbsg
      ToPort: 8080
  sgIngressSshFromEverywhere:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: '22'
      GroupId:
        Ref: sg
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      ToPort: 22
Outputs:
  S3LogBucket:
    Description: S3 log bucket for this stack
    Value: '|GetAtt|s3LogBucket|WebsiteURL'
  WebsiteURL:
    Description: Service URL
    Value:
      '|Join|':
        - 'http://'
        - '|GetAtt|elb|DNSName'
        - '/'
AWSTemplateFormatVersion: '2010-09-09'
Description: "ecs minimal webapp"
Parameters:
  dockerImageVersion:
    Description: Docker image version
    Type: String
    Default: latest
  dockerAppImage:
    Description: Docker application image
    Type: String
    Default: immobilienscout24/python-docker-hello-world-webapp
  dockerContainerName:
    Description: Name of the application container
    Type: String
    Default: python-docker-hello-world-webapp
  subnetIds:
    ConstraintDescription: comma separated list of subnet-ids, defaults for Ireland
    Description: Subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
  amiId:
    Description: Id of the base AMI
    Type: AWS::EC2::Image::Id
    Default: ami-6b12271c
  vpcId:
    ConstraintDescription: must begin with vpc- and can contain only alphanumeric
      characters. defaults for Ireland
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Instance Type
    Type: String
    Default: t2.micro
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  taskdefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: "|ref|dockerContainerName"
          Cpu: "1024"
          Essential: "true"
          Image:
            '|Join|:':
              - "|ref|dockerAppImage"
              - "|ref|dockerImageVersion"
          Memory: "300"
          PortMappings:
            - HostPort: 8080
              ContainerPort: 8080
  service:
    Type: "AWS::ECS::Service"
    DependsOn:
      - "ECSServiceRole"
      - "Asg"
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: "1"
      LoadBalancers:
        - ContainerName: "|ref|dockerContainerName"
          ContainerPort: "8080"
          LoadBalancerName:
            Ref: "elb"
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: "taskdefinition"
  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "ecs-service"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "elasticloadbalancing:*"
                Resource: "*"
  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT5M
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: AWS::Region
      Cooldown: '10'
      HealthCheckGracePeriod: '600'
      HealthCheckType: ELB
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      LoadBalancerNames:
      - Ref: elb
      MaxSize: '10'
      MinSize: '2'
      DesiredCapacity: '2'
      TerminationPolicies:
      - OldestLaunchConfiguration
      VPCZoneIdentifier:
        Ref: subnetIds
  elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: HTTP:8080/
        Timeout: '5'
        UnhealthyThreshold: '10'
      Listeners:
      - InstancePort: '8080'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
      SecurityGroups:
      - Ref: elbsg
      Subnets:
        Ref: subnetIds
  elbsg:
    Properties:
      GroupDescription: ELB
      VpcId:
        Ref: vpcId
    Type: AWS::EC2::SecurityGroup
  elbsgEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: sg
      FromPort: '8080'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '8080'
    Type: AWS::EC2::SecurityGroupEgress
  elbsgIngressFromEverywhere:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '80'
      GroupId:
        Ref: elbsg
      IpProtocol: tcp
      ToPort: '80'
    Type: AWS::EC2::SecurityGroupIngress
  iamInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: iamRole
    Type: AWS::IAM::InstanceProfile
  iamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: elasticloadbalancing:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: allow-elb-healthcheck
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:CreateCluster
            - ecs:RegisterContainerInstance
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Submit*
            - ecs:Poll
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: esc-service
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups:
        - "|ref|sg"
      ImageId: "|ref|amiId"
      InstanceType: "|ref|InstanceType"
      IamInstanceProfile: "|ref|iamInstanceProfile"
      UserData:
        Fn::Base64:
          Fn::Join:
           - ""
           -
             - "#!/bin/bash\n"
             - "echo ECS_CLUSTER="
             - Ref: "ECSCluster"
             - " >> /etc/ecs/ecs.config\n"
  sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: stack internal
      VpcId:
        Ref: vpcId
  sgIngressFromELB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: '8080'
      GroupId:
        Ref: sg
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: elbsg
      ToPort: 8080
  ElbHealthyInstances:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: There should be one healthy instance
        ComparisonOperator: LessThanThreshold
        Dimensions:
          - Name: LoadBalancerName
            Value: '|Ref|elb'
        EvaluationPeriods: '2'
        MetricName: HealthyHostCount
        Namespace: AWS/ELB
        Period: '60'
        Statistic: Average
        Threshold: '1'
Outputs:
  WebsiteURL:
    Description: Service URL
    Value:
      '|Join|':
        - 'http://'
        - '|GetAtt|elb|DNSName'
        - '/'
